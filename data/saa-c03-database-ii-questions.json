[
    {
        "id": "db-q001",
        "type": "multiple-choice",
        "question": "A mobile game records player actions that arrive at unpredictable rates\u2014sometimes millions per second during global events. Data must be available for real-time leaderboards within milliseconds and stale data can be discarded after 24 hours. Which AWS database is the BEST fit?",
        "options": [
            "RDS MySQL with provisioned IOPS",
            "ElastiCache for Redis cluster mode disabled",
            "DynamoDB on-demand with TTL enabled",
            "Amazon Timestream"
        ],
        "correctIndex": 2,
        "explanation": "DynamoDB on-demand automatically scales for unpredictable write throughput, delivers single-digit millisecond latency, and TTL removes stale items after 24 hours without administrative effort. RDS cannot scale writes that quickly, Redis is volatile and needs a separate persistence layer, and Timestream is optimized for analytical time-series queries rather than frequent key-value lookups for leaderboards.",
        "tags": [
            "High-Performing Architectures",
            "DynamoDB",
            "Serverless"
        ]
    },
    {
        "id": "db-q002",
        "type": "multiple-choice",
        "question": "A health-care SaaS provider needs an ACID-compliant relational database with automatic failover across three Availability Zones, near-zero recovery point objective (RPO), and the ability to offload read traffic. The development team prefers PostgreSQL. Which choice meets these requirements with the LEAST operational overhead?",
        "options": [
            "Amazon Aurora PostgreSQL in a Multi-AZ cluster",
            "RDS PostgreSQL with one read replica",
            "DynamoDB global tables",
            "Self-managed PostgreSQL on EC2 in an Auto Scaling group"
        ],
        "correctIndex": 0,
        "explanation": "Aurora stores six copies across three AZs, provides automatic failover typically under 30 seconds, and offers reader endpoints for read scaling\u2014all fully managed. Standard RDS Multi-AZ provides failover but stores only two copies and read replicas reside in a single AZ. Managing EC2 hosts increases overhead, and DynamoDB is nonrelational.",
        "tags": [
            "Resilient Architectures",
            "Aurora",
            "High Availability"
        ]
    },
    {
        "id": "db-q003",
        "type": "multiple-choice",
        "question": "An IoT analytics platform ingests billions of sensor readings per day and needs SQL access to recent data with millisecond latency, while automatically tiering older records to lower-cost storage. Which database best accommodates this workload?",
        "options": [
            "ElastiCache Redis with disk persistence",
            "RDS MySQL with partitioned tables",
            "Amazon Timestream",
            "DynamoDB with DAX"
        ],
        "correctIndex": 2,
        "explanation": "Timestream is purpose-built for time-series data, automatically moves data from in-memory to magnetic storage, and supports SQL queries with built-in time-series functions, reducing management. RDS would require manual partitioning and scaling, DynamoDB is not optimized for time-based aggregations, and Redis is an in-memory cache not a durable store.",
        "tags": [
            "Cost-Optimized Architectures",
            "Timestream",
            "Time Series"
        ]
    },
    {
        "id": "db-q004",
        "type": "multiple-choice",
        "question": "A legacy on-prem Oracle application requires access to a fully managed Oracle database in AWS with OS-level customizations and Oracle features not supported by RDS. What option provides these capabilities while remaining managed by AWS?",
        "options": [
            "RDS Custom for Oracle",
            "Aurora PostgreSQL with Oracle compatibility",
            "RDS Oracle Standard Edition",
            "Self-managed Oracle on EC2"
        ],
        "correctIndex": 0,
        "explanation": "RDS Custom for Oracle lets customers customize the underlying OS and database while AWS manages backups, storage, and monitoring. Standard RDS does not allow such customizations; self-managing on EC2 increases operational burden; Aurora is not fully Oracle-compatible.",
        "tags": [
            "Operational Excellence",
            "RDS",
            "Custom"
        ]
    },
    {
        "id": "db-q005",
        "type": "multiple-choice",
        "question": "A multinational ecommerce site needs product-catalog reads and writes to be local in North America, Europe, and Asia with sub-10 ms latency. Data conflicts must be minimal and resolved automatically. Which AWS solution is MOST appropriate?",
        "options": [
            "DynamoDB global tables (version 2)",
            "ElastiCache Redis Global Datastore",
            "RDS MySQL with cross-Region read replicas",
            "Aurora global database"
        ],
        "correctIndex": 0,
        "explanation": "DynamoDB global tables provide multi-master, active-active replication across Regions with single-digit millisecond latency and last-writer-wins conflict resolution. Aurora global offers fast cross-Region reads but writes funnel to one Region. RDS cross-Region replicas allow local reads only. Redis Global Datastore is volatile and not a durable system of record.",
        "tags": [
            "High-Performing Architectures",
            "DynamoDB",
            "Global Tables"
        ]
    },
    {
        "id": "db-q006",
        "type": "multiple-choice",
        "question": "A financial trading system requires sub-millisecond cached lookups for reference data plus guaranteed durability to recover after cache failures. Which architecture meets performance and durability needs with minimal application changes?",
        "options": [
            "ElastiCache Redis with snapshotting disabled",
            "ElastiCache Memcached with multi-node clusters",
            "DAX in front of DynamoDB",
            "RDS MySQL with READ COMMITTED isolation"
        ],
        "correctIndex": 2,
        "explanation": "DAX provides microsecond read latency and is API-compatible with DynamoDB, writing through to the durable backing store. Redis or Memcached alone risk data loss unless the app manages durability. RDS cannot meet sub-millisecond cache latency.",
        "tags": [
            "High-Performing Architectures",
            "DynamoDB",
            "DAX"
        ]
    },
    {
        "id": "db-q007",
        "type": "multiple-choice",
        "question": "Developers need a graph database to model relationships between users, products, and orders, enabling queries such as shortest path and centrality. Which managed AWS service should be selected?",
        "options": [
            "ElastiCache Redis",
            "Keyspaces (for Apache Cassandra)",
            "DocumentDB",
            "Amazon Neptune"
        ],
        "correctIndex": 3,
        "explanation": "Neptune is a fully managed graph database supporting property graph (Gremlin) and RDF (SPARQL) queries optimized for such relationships. The other services lack native graph query capabilities.",
        "tags": [
            "High-Performing Architectures",
            "Neptune",
            "Graph"
        ]
    },
    {
        "id": "db-q008",
        "type": "multiple-choice",
        "question": "A marketing analytics workload requires complex JOINs across terabytes of structured data with columnar storage and Massively Parallel Processing (MPP). Which AWS database technology is purpose-built for this?",
        "options": [
            "RDS PostgreSQL",
            "Amazon Redshift",
            "DynamoDB with PartiQL",
            "Aurora Serverless v2"
        ],
        "correctIndex": 1,
        "explanation": "Redshift is an MPP, column-oriented data warehouse designed for large analytic queries and joins. RDS and Aurora are OLTP engines; DynamoDB offers limited SQL support and is not suited for heavy joins.",
        "tags": [
            "High-Performing Architectures",
            "Redshift",
            "Analytics"
        ]
    },
    {
        "id": "db-q009",
        "type": "multiple-choice",
        "question": "A startup needs a document database that is MongoDB-compatible and fully managed. They anticipate scaling to millions of read and write requests per second and prefer to avoid re-writing their existing MongoDB drivers. Which service fits best?",
        "options": [
            "Amazon DocumentDB (with MongoDB compatibility)",
            "Neptune",
            "RDS PostgreSQL with JSONB columns",
            "DynamoDB with JSON attributes"
        ],
        "correctIndex": 0,
        "explanation": "DocumentDB maintains MongoDB API compatibility, letting existing drivers connect with minimal changes and scaling storage independently. DynamoDB JSON support requires SDK changes and different query patterns. JSONB on RDS is limited by single-instance constraints, and Neptune is for graph.",
        "tags": [
            "Migration",
            "DocumentDB",
            "NoSQL"
        ]
    },
    {
        "id": "db-q010",
        "type": "multiple-choice",
        "question": "Which database solution is recommended for writing time-stamped clickstream events and running windowed aggregation queries every minute with SQL-like syntax?",
        "options": [
            "Keyspaces",
            "RDS MariaDB",
            "ElastiCache Redis streams",
            "Amazon Timestream"
        ],
        "correctIndex": 3,
        "explanation": "Timestream provides built-in time-series functions (windowing, aggregates) via SQL and handles tiered storage automatically, ideal for clickstream analytics. Keyspaces and Redis streams need custom aggregation logic; RDS may not scale writes efficiently.",
        "tags": [
            "Operational Excellence",
            "Timestream",
            "Analytics"
        ]
    },
    {
        "id": "db-q011",
        "type": "multiple-choice",
        "question": "A microservice stores user shopping-cart data that must survive application restarts and provide single-digit millisecond reads and writes. Items are rarely more than 10 KB and need automatic expiry after 30 days. Which is the SIMPLEST solution?",
        "options": [
            "ElastiCache Redis with Append Only File persistence",
            "DynamoDB on-demand with TTL of 30 days",
            "Aurora Serverless v2 with a cart table",
            "S3 with one JSON object per cart"
        ],
        "correctIndex": 1,
        "explanation": "DynamoDB meets the latency requirement, offers managed durability, and TTL automatically deletes old carts. Redis persistence requires extra operations, Aurora over-engineers the need, and S3 has higher latency for small objects.",
        "tags": [
            "Cost-Optimized Architectures",
            "DynamoDB",
            "TTL"
        ]
    },
    {
        "id": "db-q012",
        "type": "multiple-choice",
        "question": "You need to store and query millions of vehicle-telemetry JSON documents with flexible attributes while supporting ad-hoc queries on nested fields. Which managed service requires the LEAST schema management and scaling effort?",
        "options": [
            "DynamoDB with multiple GSIs",
            "Amazon OpenSearch Serverless",
            "Amazon DocumentDB",
            "RDS PostgreSQL with JSONB"
        ],
        "correctIndex": 1,
        "explanation": "OpenSearch Serverless ingests JSON documents, indexes nested fields automatically, and scales the cluster without manual node management, providing powerful ad-hoc search. RDS requires capacity planning and limited scale, DocumentDB is document-oriented but less optimized for complex search, and DynamoDB needs indexes defined upfront.",
        "tags": [
            "High-Performing Architectures",
            "OpenSearch",
            "Serverless"
        ]
    },
    {
        "id": "db-q013",
        "type": "multiple-choice",
        "question": "An online payment system requires immediate consistency for account balances, ACID transactions, and regional failover in under a minute. Which database architecture BEST addresses these needs?",
        "options": [
            "Aurora Multi-master (MySQL compatible)",
            "DynamoDB with transaction API",
            "ElastiCache Redis cluster with AOF",
            "RDS MySQL with Multi-AZ"
        ],
        "correctIndex": 0,
        "explanation": "Aurora Multi-master allows writes on multiple nodes in the same Region with immediate consistency and sub-second failover. DynamoDB transactions are ACID but eventual global consistency unless carefully architected. Redis lacks durable ACID guarantees. Standard RDS failover times may exceed a minute.",
        "tags": [
            "Secure Architectures",
            "Aurora",
            "Transactions"
        ]
    },
    {
        "id": "db-q014",
        "type": "multiple-choice",
        "question": "A social networking app stores user relationships that change infrequently but are read often to suggest friends-of-friends. Which database service MOST efficiently supports traversing many relationship hops?",
        "options": [
            "Amazon Neptune",
            "ElastiCache Memcached",
            "Aurora PostgreSQL with recursive CTEs",
            "DynamoDB global tables"
        ],
        "correctIndex": 0,
        "explanation": "Neptune is optimized for graph traversals and efficiently computes multi-hop relationships. Recursive SQL on Aurora is slower and complex. DynamoDB lacks join capability. Memcached would need application-level traversal logic.",
        "tags": [
            "High-Performing Architectures",
            "Neptune",
            "Graph"
        ]
    },
    {
        "id": "db-q015",
        "type": "open-ended",
        "question": "Discuss the factors that should influence a choice between Amazon Aurora Serverless v2 and Amazon RDS MySQL for a startup expecting unpredictable traffic growth.",
        "answer": "Aurora Serverless v2 scales compute in fine-grained increments based on actual load, so it handles unpredictable spikes without intervention and bills per second of capacity used, reducing idle cost. It delivers Aurora\u2019s higher availability with six-way replicated storage. However, cold-start latency can occur if capacity was scaled to zero, and some features (e.g., logical replication) may be limited. RDS MySQL offers lower baseline cost at small instance sizes, full MySQL feature parity, and predictable performance but requires manual instance scaling or auto-scale events that cause downtime. Teams should weigh expected idle periods, feature requirements, and acceptable scaling latency when deciding.",
        "tags": [
            "Cost-Optimized Architectures",
            "Aurora",
            "RDS"
        ]
    },
    {
        "id": "db-q016",
        "type": "open-ended",
        "question": "Explain how ElastiCache Redis Global Datastore differs from DynamoDB global tables in terms of durability, use cases, and conflict handling.",
        "answer": "Redis Global Datastore replicates in-memory data asynchronously across Regions, providing sub-second read latency for cache scenarios. It is volatile; if all primary and replica nodes fail, data is lost unless external persistence is enabled, so it suits session stores or transient leaderboards. Conflict resolution is last-write-wins but without versioning. DynamoDB global tables store data durably on SSD-backed storage with multi-master writes, automatically resolve conflicts via timestamps, and are appropriate as a system of record. DynamoDB incurs higher per-request cost but eliminates data loss risk, while Redis offers faster access for ephemeral data.",
        "tags": [
            "Resilient Architectures",
            "ElastiCache",
            "DynamoDB"
        ]
    },
    {
        "id": "db-q017",
        "type": "open-ended",
        "question": "Provide an architecture that ingests clickstream data with Amazon Kinesis Data Streams, writes to DynamoDB, and uses DynamoDB Streams to update an OpenSearch index in near real time.",
        "answer": "Client browsers send events to a Kinesis Data Stream partitioned by user ID. A Lambda consumer batch-writes items to a DynamoDB table with on-demand capacity. DynamoDB Streams capture inserts and trigger another Lambda that transforms the item into a search document and calls the OpenSearch bulk API. This decouples write ingestion from search indexing, provides retry logic, and allows DynamoDB to remain the source of truth while OpenSearch serves full-text queries.",
        "tags": [
            "High-Performing Architectures",
            "DynamoDB",
            "OpenSearch",
            "Lambda"
        ]
    },
    {
        "id": "db-q018",
        "type": "open-ended",
        "question": "Why might an application team choose Amazon Keyspaces over self-managed Cassandra on EC2 for an IoT workload with strict SLA requirements?",
        "answer": "Keyspaces is serverless, so it automatically scales partitions and throughput, provides single-digit millisecond performance, and eliminates operational tasks like patching, repairs, and capacity planning. It replicates data across three AZs, offers on-demand or provisioned capacity with auto-scaling, and integrates with AWS security and monitoring. Self-managing Cassandra requires expertise to tune, handle node failures, scale clusters, and meet SLAs, increasing risk and operational load.",
        "tags": [
            "Operational Excellence",
            "Keyspaces",
            "NoSQL"
        ]
    }
]